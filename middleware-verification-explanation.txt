How the Middleware and fetchWithVerification Work

1. Purpose
- Protects sensitive API endpoints from unauthorized or replayed requests.
- Every POST request to protected endpoints must include a one-time-use verification key.

2. Client Side: fetchWithVerification
- Use the helper function fetchWithVerification instead of fetch.
- This function:
  a. Generates a random string called randomKey.
  b. Combines randomKey with a secret key (shared by client and server) and hashes them together to create fusedKey.
  c. Adds both randomKey and fusedKey to the request body.
  d. Sends the request as usual.

Example usage:
  await fetchWithVerification('/api/spin', {
    method: 'POST',
    body: JSON.stringify({ fid }),
    headers: { 'Content-Type': 'application/json' }
  });

3. Server Side: Middleware
- The middleware runs on all POST requests except for a few public endpoints.
- It does the following:
  a. Extracts randomKey and fusedKey from the request body.
  b. Checks that both are present.
  c. Recomputes the expected fusedKey using the same method as the client.
  d. Verifies that the provided fusedKey matches the expected one.
  e. Checks that the fusedKey has not been used before (to prevent replay attacks).
  f. If all checks pass, the request is allowed to proceed. Otherwise, it is blocked with an error.

4. Security
- The secret key must be the same on both client and server (usually set as an environment variable).
- Each fusedKey can only be used once.
- The hashing uses a secure Ethereum-standard function.

5. Summary
- The client always sends a fresh, one-time-use verification key with each POST request.
- The server middleware checks the validity and uniqueness of this key before allowing the request.
- This system helps prevent unauthorized or replayed requests to sensitive endpoints.

In short:
"Every protected POST request must include a one-time verification key, generated by hashing a random string with a shared secret. The server middleware checks this key and ensures it hasn't been used before, blocking any invalid or replayed requests. Use fetchWithVerification on the client to handle this automatically." 